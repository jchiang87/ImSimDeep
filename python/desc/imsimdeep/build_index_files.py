"""
Code to generate a set of astrometry.net index files from a reference
catalog generated by InstanceCatalog.write_catalog.
"""
from __future__ import absolute_import, print_function
import os
import shutil
import glob
import subprocess

__all__ = ['add_starnotgal', 'refcat_to_astrometry_net_input',
           'build_index_files']

def add_starnotgal(infile, outfile):
    """
    Add the starnotgal column to an input reference catalog containing
    only stars.

    Parameters
    ----------
    infile : str
        Input reference catalog.
    outfile : str
        Output filename.
    """
    with open(infile) as input_:
        lines = input_.readlines()
    with open(outfile, 'w') as output:
        output.write(lines[0].strip() + ', starnotgal\n')
        for line in lines[1:]:
            tokens = line.strip().split(', ')
            tokens.append('1')
            output.write(', '.join(tokens) + '\n')

def refcat_to_astrometry_net_input(refcat_file, outfile=None,
                                   tempfile='temp.txt'):
    """
    Convert an ascii reference catalog to a FITS file in the form of a
    binary table.

    Parameters
    ----------
    refcat_file : str
        Name of the ASCII file containing the reference star data.
    outfile : str, optional
        Output file name for the FITS binary table data.
        Default: the refcat_file name but with a '.fits' extension.
    tempfile : str, optional
        Temporary ASCII file to contain the reference star data with
        the "starnotgal" column added.

    Returns
    -------
    str : The file name of the FITS file.
    """
    if outfile is None:
        outfile = '.'.join(refcat_file.split('.')[:-1]) + '.fits'

    add_starnotgal(refcat_file, tempfile)

    command = "text2fits.py -H 'id, ra, dec, u, g, r, i, z, y, isvariable, starnotgal' -s ', ' %s %s -f 'kddddddddjj'" % (refcat_txt, outfile)
    print(command)
    subprocess.check_call(command, shell=True)

    os.remove(tempfile)

    return outfile

def build_index_files(ref_file, index_id, max_scale_number=4, output_dir='.'):
    """
    Generate astrometry.net index files from a reference file of stars.

    Parameters
    ----------
    ref_file : str
        File name of reference catalog of stars.
    index_id : str
        ID used to identify a set of astrometry.net index files.
    max_scale_number : int, optional
        Maximum scale for generating index files. Default: 4
    output_dir : str
        Output directory for index files. Default: '.'
    """
    file_ext = '%(index_id)s00' % locals()
    index_file_00 = 'index-%(file_ext)s.fits' % locals()
    index_files = [index_file_00]
    command = 'build-astrometry-index -i %(ref_file)s -o %(index_file_00)s -I %(file_ext)s -P 0 -S r -n 100 -L 20 -E -j 0.4 -r 1 > build-00.log' % locals()
    print(command)
    subprocess.call(command, shell=True)
    for scale_number in range(1, max_scale_number+1):
        file_ext = '%(index_id)s%(scale_number)02i' % locals()
        index_file = 'index-%(file_ext)s.fits' % locals()
        command = 'build-astrometry-index -1 %(index_file_00)s -o %(index_file)s -I %(file_ext)s -P %(scale_number)i -S r -L 20 -E -M -j 0.4 > build-%(scale_number)02i.log' % locals()
        print(command)
        subprocess.call(command, shell=True)
        index_files.append(index_file)
    if output_dir != '.':
        try:
            os.makedirs(output_dir)
        except OSError:
            pass
        for item in index_files:
            shutil.move(item, os.path.join(output_dir, item))
        for item in glob.glob('build-??.log'):
            shutil.move(item, os.path.join(output_dir, item))
